When would you want to use a remote repository rather than keeping all your work
local?

A remote repository is useful when you are collaborating with others so that
the work being done is kept at a central location that is accessible to
everyone rather than on a single computer.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

There may be many commits being made to the remote repository by many
collaborators and so having automatic pulls from the remote would mean many
inconvenient connections to GitHub. By manually pulling changes, you can
control how often the repository is updated by pulling multiple commits at once

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Forking allows you to make a copy of someone else's existing repository
directly on the GitHub servers without pulling down the code to your local
machine. Forking is like cloning, it is a clone that GitHub makes for you on
their own machines.
Cloning is taking an existing repository and making one just like it remotely
(GitHub to local) or locally (local repository onto another spot on computer)
Branching involves making changes to one commit on a single repository and
branching it out onto a new branch with a different name. This is done on
either just the local machine or just on GitHub.

What is the benefit of having a copy of the last known state of the remote
stored locally?

This means that any changes or commits that other collaborators have made get
copied to the local machine so that they can be merged with the commits on the
local machine. Then this latest commit can be pushed to GitHub so that all the
commits are in sync and up to date.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

Collaboration could be done through email where one person makes a change and
notifies the collaborators of the change and waits for their response or
changes. This would be harder and more time consuming because every time a
change is made, you would need to write a new email. And for every change,
there would be a new version or copy of the work. It would also mean that only
one person at a time can work on the code.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
